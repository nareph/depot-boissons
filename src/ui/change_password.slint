// src/ui/change_password.slint

// On n'importe PAS InputType dans la liste, il est implicite.
import { VerticalBox, LineEdit, Button } from "std-widgets.slint";

export component ChangePasswordWindow inherits Window {
    title: "Changement de Mot de Passe Obligatoire";
    width: 400px;
    height: 250px;

    // Propriétés
    in-out property<string> new_password_text: "";
    in-out property<string> confirm_password_text: "";
    in-out property<string> status_text: "";
    in-out property<bool> loading: false;

    // Callbacks
    callback confirm_clicked(string);
    callback request_close();

    VerticalBox {
        padding: 20px;
        spacing: 10px;

        Text {
            text: "C'est votre première connexion. Veuillez définir un nouveau mot de passe.";
            wrap: word-wrap;
            horizontal-alignment: center;
        }

        LineEdit {
            placeholder-text: "Nouveau mot de passe";
            input-type: InputType.password;
            text <=> root.new_password_text;
            enabled: !root.loading;
        }
        LineEdit {
            placeholder-text: "Confirmer le mot de passe";
            input-type: InputType.password;
            text <=> root.confirm_password_text;
            enabled: !root.loading;
        }

        Button {
            text: "Confirmer";
            // La bonne syntaxe pour la condition, sans .trim()
            enabled: !root.loading && root.new_password_text != "" && root.new_password_text == root.confirm_password_text;
            clicked => { root.confirm_clicked(root.new_password_text) }
        }

        Text {
            text: root.status_text;
            horizontal-alignment: center;
            // La bonne syntaxe pour la couleur, sans .contains()
            // On s'assurera que le code Rust envoie "Erreur"
            color: root.status_text == "Erreur" ? #ff0000 : #00aa00;
        }
    }
}